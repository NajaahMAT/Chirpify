// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/posts": {
            "get": {
                "description": "Get a list of all posts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Retrieve all posts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new post for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Create a new post",
                "parameters": [
                    {
                        "description": "Create Post Request",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/posts/like": {
            "post": {
                "description": "Like a post by providing the like request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Like a specific post",
                "parameters": [
                    {
                        "description": "Like Post Request",
                        "name": "likeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LikeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/posts/{postID}": {
            "put": {
                "description": "Update an existing post with new data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Update an existing post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Post Request",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UpdatePostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/posts/{postID}/comments": {
            "post": {
                "description": "Add a comment to an existing post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Add a comment to a specific post",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment Request",
                        "name": "commentRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/posts/{postID}/details": {
            "get": {
                "description": "Get all details of a specific post by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Retrieve all details of a specific post, including comments and likes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.GeoLocation": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "place": {
                    "description": "Place ID for the location",
                    "type": "string"
                }
            }
        },
        "model.PrivacySettings": {
            "type": "object",
            "properties": {
                "value": {
                    "description": "Options: \"PUBLIC\", \"FRIENDS\", \"ONLY_ME\", \"CUSTOM\"",
                    "type": "string"
                }
            }
        },
        "request.CommentRequest": {
            "type": "object",
            "required": [
                "comment_text",
                "user_id"
            ],
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment_text": {
                    "description": "The content of the comment",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "is_edited": {
                    "type": "boolean"
                },
                "parent_comment_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "ID of the user adding the comment",
                    "type": "integer"
                }
            }
        },
        "request.CreatePostRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "allow_cmt": {
                    "type": "boolean"
                },
                "caption": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/model.GeoLocation"
                },
                "message": {
                    "description": "Pointer to differentiate between no update and clearing the value",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "privacy": {
                    "$ref": "#/definitions/model.PrivacySettings"
                },
                "scheduled_publish_time": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "description": "\"published\", \"draft\"",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.LikeRequest": {
            "type": "object",
            "properties": {
                "post_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "request.UpdatePostRequest": {
            "type": "object",
            "properties": {
                "allow_cmt": {
                    "type": "boolean"
                },
                "caption": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "file_url": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/model.GeoLocation"
                },
                "message": {
                    "description": "Pointer to differentiate between no update and clearing the value",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "privacy": {
                    "$ref": "#/definitions/model.PrivacySettings"
                },
                "scheduled_publish_time": {
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "description": "\"published\", \"draft\"",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
